package com.github.havardh.javaflow;

import static java.lang.String.format;
import static java.util.Arrays.asList;
import static java.util.Collections.singletonList;

import java.util.ArrayList;
import java.util.List;

import com.github.havardh.javaflow.exceptions.ExitException;
import com.github.havardh.javaflow.model.TypeMap;
import com.github.havardh.javaflow.phases.filetransform.CommentPrependTransformer;
import com.github.havardh.javaflow.phases.filetransform.EslintDisableTransformer;
import com.github.havardh.javaflow.phases.parser.java.JavaParser;
import com.github.havardh.javaflow.phases.parser.java.JavaParserFlags;
import com.github.havardh.javaflow.phases.reader.FileReader;
import com.github.havardh.javaflow.phases.resolver.FileResolver;
import com.github.havardh.javaflow.phases.transform.InheritanceTransformer;
import com.github.havardh.javaflow.phases.transform.SortedTypeTransformer;
import com.github.havardh.javaflow.phases.verifier.ClassGetterNamingVerifier;
import com.github.havardh.javaflow.phases.verifier.MemberFieldsPresentVerifier;
import com.github.havardh.javaflow.phases.verifier.Verifier;
import com.github.havardh.javaflow.phases.writer.flow.FlowWriter;
import com.github.havardh.javaflow.phases.writer.flow.converter.Converter;
import com.github.havardh.javaflow.phases.writer.flow.converter.JavaFlowConverter;
import com.github.havardh.javaflow.util.App;
import picocli.CommandLine;

/**
 * Commmand line runner for JavaFlow
 */
@CommandLine.Command(
    name = "javaflow",
    description = "convert java models to flow types",
    footer = "Open source MIT --- https://www.github.com/havardh/javaflow"
)
public class JavaFlow implements Runnable {

  @CommandLine.Option(names = { "--verifyGetters" }, description = "Verify that field and getter names match")
  private boolean verifyGetters;

  @CommandLine.Option(names = { "--includeStaticFields"}, description = "Include static fields", defaultValue = "false")
  private boolean includeStaticFields;

  @CommandLine.Parameters(arity = "1..*", paramLabel = "file|folder|glob", description = "File(s), directorie(s) or glob patterns to process")
  private String[] patterns;

  /**
   * Main routine for JavaFlow command line runner
   *
   * @param args command line arguments
   */
  public static void main(String args[]) {
    CommandLine.run(new JavaFlow(), args);
  }

  /**
   * Execute the javaflow progam with command line arguments
   *
   * Runnable.run method executed by picocli.Commandline.run
   */
  public void run() {
    TypeMap typeMap = new TypeMap("types.yml");
    Converter converter = new JavaFlowConverter(typeMap);

    List<Verifier> verifierList = new ArrayList<>();
    verifierList.add(new MemberFieldsPresentVerifier(typeMap));
    if (verifyGetters) {
      verifierList.add(new ClassGetterNamingVerifier());
    }

    Execution execution = new Execution(
        new FileResolver(),
        new FileReader(),
        new JavaParser(JavaParserFlags.config().includeStaticFields(includeStaticFields).build()),
        asList(
            new InheritanceTransformer(),
            new SortedTypeTransformer()
        ),
        verifierList,
        new FlowWriter(converter),
        asList(
            new CommentPrependTransformer(format("Generated by javaflow %s", App.version())),
            new EslintDisableTransformer(singletonList("no-use-before-define")),
            new CommentPrependTransformer("@flow")
        )
    );

    try {
      System.out.println(execution.run(patterns));
    } catch (ExitException e) {
      e.printStackTrace();
      System.exit(e.getErrorCode().getCode());
    }
  }

}
